name: Pkg version to use
description: Determine which version to use and if it is the latest version

inputs:
  pkg-file:
    default: pkg-info.json
    required: true
    description: The path to the pkg-info file.
  pkg-version:
    required: false
    description: The desired pkg version to use.

outputs:
  version:
    description: The version to use.
    value: ${{ steps.script.outputs.version }}
  is-latest:
    description: True if the version to use is the latest one.
    value: ${{ steps.script.outputs.is_latest }}

runs:
  using: composite
  steps:
    - name: Get package's version to use
      id: script
      shell: bash
      run: |
        set -eu -o pipefail

        LATEST_VERSION=$(jq -r .latest_version "$PKG_FILE")

        if [ -z "$PKG_VERSION" ]; then
          PKG_VERSION="$LATEST_VERSION"
        fi

        if jq -r '.versions | keys[]' "$PKG_FILE" | grep -e "$PKG_VERSION"; then
          (
            echo "version=$PKG_VERSION"
            if [ "$LATEST_VERSION" == "$PKG_VERSION" ]; then
              echo is_latest=true
            else
              echo is_latest=false
            fi
          ) | tee -a $GITHUB_OUTPUT
        else
          echo "The specified version ($PKG_VERSION) is not listed in the package file ($PKG_FILE)" >&2
          exit 1
        fi
      env:
        PKG_FILE: ${{ inputs.pkg-file }}
        PKG_VERSION: ${{ inputs.pkg-version }}
